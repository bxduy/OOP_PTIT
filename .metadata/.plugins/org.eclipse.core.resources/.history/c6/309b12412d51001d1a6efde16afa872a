package J04011;

public class Point3D {
	private int x, y, z;

	public Point3D(int x, int y, int z) {
		super();
		this.x = x;
		this.y = y;
		this.z = z;
	}

	public Point3D() {
		super();
	}
	
	public static Point3D vector(Point3D p1, Point3D p2) {

	        // vector giữa 2 điểm 

	        Point3D res = new Point3D();
	        res.x = p2.x - p1.x;
	        res.y = p2.y - p1.y;
	        res.z = p2.z - p1.z;
	        return res;
	   }
	public static Point3D normal_vector(Point3D p1, Point3D p2, Point3D p3) {

        // vector pháp tuyến của mặt phẳng (A,B,C)

        Point3D res = new Point3D();
        Point3D vector1 = vector(p1, p2);
        Point3D vector2 = vector(p1, p3);
        res.x = (vector1.y*vector2.z - vector1.z*vector2.y);
        res.y = -(vector1.x*vector2.z - vector1.z*vector2.x);
        res.z = (vector1.x*vector2.y - vector1.y*vector2.x);
        return res;
    }

    public static long getD(Point3D p1, Point3D p2, Point3D p3){

        // Phương trình mặt phẳng Ax + By + Cz = D

        long res = 0;
        Point3D n_vector = normal_vector(p1, p2, p3);
        res = -(long)(n_vector.x*p1.x + n_vector.y*p1.y + n_vector.z*p1.z);
        return res;
    }

    public static boolean check(Point3D p1, Point3D p2, Point3D p3, Point3D p4) {

        Point3D n_vector = normal_vector(p1, p2, p3);
        long left = (long)(n_vector.x*p4.x + n_vector.y*p4.y + n_vector.z*p4.z);
        long right = getD(p1, p2, p3);
        if (left == right) {
            return true;
        }
        return false;
    }
}
//3
//1 2 0
//2 3 0
//4 0 0
//0 0 0
//1 1 1
//2 2 2
//3 3 3
//4 4 4
//5 6 7
//-8 -9 -10
//12 19 0
//3 1 5

}
